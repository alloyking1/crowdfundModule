// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: crowdfund/crowdfund.proto

package types

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Crowdfund struct {
	Id       uint64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Total    string            `protobuf:"bytes,2,opt,name=total,proto3" json:"total,omitempty"`
	Amount   string            `protobuf:"bytes,3,opt,name=amount,proto3" json:"amount,omitempty"`
	Fee      string            `protobuf:"bytes,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Deadline string            `protobuf:"bytes,5,opt,name=deadline,proto3" json:"deadline,omitempty"`
	State    string            `protobuf:"bytes,6,opt,name=state,proto3" json:"state,omitempty"`
	Owner    string            `protobuf:"bytes,7,opt,name=owner,proto3" json:"owner,omitempty"`
	Pledger  map[string]string `protobuf:"bytes,8,rep,name=pledger,proto3" json:"pledger,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Crowdfund) Reset()         { *m = Crowdfund{} }
func (m *Crowdfund) String() string { return proto.CompactTextString(m) }
func (*Crowdfund) ProtoMessage()    {}
func (*Crowdfund) Descriptor() ([]byte, []int) {
	return fileDescriptor_15bd2d1e36d5b07d, []int{0}
}
func (m *Crowdfund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Crowdfund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Crowdfund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Crowdfund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Crowdfund.Merge(m, src)
}
func (m *Crowdfund) XXX_Size() int {
	return m.Size()
}
func (m *Crowdfund) XXX_DiscardUnknown() {
	xxx_messageInfo_Crowdfund.DiscardUnknown(m)
}

var xxx_messageInfo_Crowdfund proto.InternalMessageInfo

func (m *Crowdfund) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Crowdfund) GetTotal() string {
	if m != nil {
		return m.Total
	}
	return ""
}

func (m *Crowdfund) GetAmount() string {
	if m != nil {
		return m.Amount
	}
	return ""
}

func (m *Crowdfund) GetFee() string {
	if m != nil {
		return m.Fee
	}
	return ""
}

func (m *Crowdfund) GetDeadline() string {
	if m != nil {
		return m.Deadline
	}
	return ""
}

func (m *Crowdfund) GetState() string {
	if m != nil {
		return m.State
	}
	return ""
}

func (m *Crowdfund) GetOwner() string {
	if m != nil {
		return m.Owner
	}
	return ""
}

func (m *Crowdfund) GetPledger() map[string]string {
	if m != nil {
		return m.Pledger
	}
	return nil
}

func init() {
	proto.RegisterType((*Crowdfund)(nil), "cosmonaut.crowdfund.crowdfund.Crowdfund")
	proto.RegisterMapType((map[string]string)(nil), "cosmonaut.crowdfund.crowdfund.Crowdfund.PledgerEntry")
}

func init() { proto.RegisterFile("crowdfund/crowdfund.proto", fileDescriptor_15bd2d1e36d5b07d) }

var fileDescriptor_15bd2d1e36d5b07d = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x91, 0xcf, 0x4a, 0xfc, 0x30,
	0x1c, 0xc4, 0x37, 0xdd, 0xbf, 0xcd, 0xef, 0x87, 0x48, 0x10, 0x89, 0x0b, 0x86, 0xe2, 0xa9, 0xa7,
	0x54, 0x14, 0x41, 0xf6, 0xa8, 0x78, 0xf1, 0xa2, 0xf4, 0xe8, 0x2d, 0xdb, 0x64, 0xd7, 0x62, 0x9b,
	0x94, 0x36, 0x75, 0xed, 0x5b, 0xf8, 0x28, 0x3e, 0x86, 0xc7, 0x3d, 0x7a, 0x94, 0xf6, 0x45, 0x24,
	0xa9, 0xed, 0xee, 0xc9, 0xdb, 0x7c, 0x26, 0x64, 0x98, 0xe1, 0x0b, 0x4f, 0xa2, 0x5c, 0x6d, 0xf8,
	0xaa, 0x94, 0x3c, 0xe8, 0x15, 0xcd, 0x72, 0xa5, 0x15, 0x3a, 0x8d, 0x54, 0x91, 0x2a, 0xc9, 0x4a,
	0x4d, 0x77, 0x4f, 0xbd, 0x3a, 0xfb, 0x70, 0xa0, 0x7b, 0xdb, 0x11, 0x3a, 0x80, 0x4e, 0xcc, 0x31,
	0xf0, 0x80, 0x3f, 0x0a, 0x9d, 0x98, 0xa3, 0x23, 0x38, 0xd6, 0x4a, 0xb3, 0x04, 0x3b, 0x1e, 0xf0,
	0xdd, 0xb0, 0x05, 0x74, 0x0c, 0x27, 0x2c, 0x55, 0xa5, 0xd4, 0x78, 0x68, 0xed, 0x5f, 0x42, 0x87,
	0x70, 0xb8, 0x12, 0x02, 0x8f, 0xac, 0x69, 0x24, 0x9a, 0xc3, 0x19, 0x17, 0x8c, 0x27, 0xb1, 0x14,
	0x78, 0x6c, 0xed, 0x9e, 0x4d, 0x76, 0xa1, 0x99, 0x16, 0x78, 0xd2, 0x66, 0x5b, 0x30, 0xae, 0xda,
	0x48, 0x91, 0xe3, 0x69, 0xeb, 0x5a, 0x40, 0x0f, 0x70, 0x9a, 0x25, 0x82, 0xaf, 0x45, 0x8e, 0x67,
	0xde, 0xd0, 0xff, 0x77, 0x71, 0x45, 0xff, 0x9c, 0x45, 0xfb, 0x49, 0xf4, 0xb1, 0xfd, 0x77, 0x27,
	0x75, 0x5e, 0x85, 0x5d, 0xca, 0x7c, 0x01, 0xff, 0xef, 0x3f, 0x98, 0xea, 0x2f, 0xa2, 0xb2, 0xcb,
	0xdd, 0xd0, 0x48, 0x53, 0xe4, 0x95, 0x25, 0xa5, 0xe8, 0xa6, 0x5b, 0x58, 0x38, 0xd7, 0xe0, 0xe6,
	0xfe, 0xb3, 0x26, 0x60, 0x5b, 0x13, 0xf0, 0x5d, 0x13, 0xf0, 0xde, 0x90, 0xc1, 0xb6, 0x21, 0x83,
	0xaf, 0x86, 0x0c, 0x9e, 0xce, 0xd7, 0xb1, 0x7e, 0x2e, 0x97, 0x34, 0x52, 0x69, 0xd0, 0xf7, 0xdb,
	0x5d, 0x24, 0x78, 0xdb, 0xd3, 0xba, 0xca, 0x44, 0xb1, 0x9c, 0xd8, 0x23, 0x5d, 0xfe, 0x04, 0x00,
	0x00, 0xff, 0xff, 0x55, 0x20, 0xb2, 0x25, 0xc1, 0x01, 0x00, 0x00,
}

func (m *Crowdfund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Crowdfund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Crowdfund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Pledger) > 0 {
		for k := range m.Pledger {
			v := m.Pledger[k]
			baseI := i
			i -= len(v)
			copy(dAtA[i:], v)
			i = encodeVarintCrowdfund(dAtA, i, uint64(len(v)))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = encodeVarintCrowdfund(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = encodeVarintCrowdfund(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x42
		}
	}
	if len(m.Owner) > 0 {
		i -= len(m.Owner)
		copy(dAtA[i:], m.Owner)
		i = encodeVarintCrowdfund(dAtA, i, uint64(len(m.Owner)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.State) > 0 {
		i -= len(m.State)
		copy(dAtA[i:], m.State)
		i = encodeVarintCrowdfund(dAtA, i, uint64(len(m.State)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Deadline) > 0 {
		i -= len(m.Deadline)
		copy(dAtA[i:], m.Deadline)
		i = encodeVarintCrowdfund(dAtA, i, uint64(len(m.Deadline)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Fee) > 0 {
		i -= len(m.Fee)
		copy(dAtA[i:], m.Fee)
		i = encodeVarintCrowdfund(dAtA, i, uint64(len(m.Fee)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Amount) > 0 {
		i -= len(m.Amount)
		copy(dAtA[i:], m.Amount)
		i = encodeVarintCrowdfund(dAtA, i, uint64(len(m.Amount)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Total) > 0 {
		i -= len(m.Total)
		copy(dAtA[i:], m.Total)
		i = encodeVarintCrowdfund(dAtA, i, uint64(len(m.Total)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCrowdfund(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCrowdfund(dAtA []byte, offset int, v uint64) int {
	offset -= sovCrowdfund(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Crowdfund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCrowdfund(uint64(m.Id))
	}
	l = len(m.Total)
	if l > 0 {
		n += 1 + l + sovCrowdfund(uint64(l))
	}
	l = len(m.Amount)
	if l > 0 {
		n += 1 + l + sovCrowdfund(uint64(l))
	}
	l = len(m.Fee)
	if l > 0 {
		n += 1 + l + sovCrowdfund(uint64(l))
	}
	l = len(m.Deadline)
	if l > 0 {
		n += 1 + l + sovCrowdfund(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovCrowdfund(uint64(l))
	}
	l = len(m.Owner)
	if l > 0 {
		n += 1 + l + sovCrowdfund(uint64(l))
	}
	if len(m.Pledger) > 0 {
		for k, v := range m.Pledger {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovCrowdfund(uint64(len(k))) + 1 + len(v) + sovCrowdfund(uint64(len(v)))
			n += mapEntrySize + 1 + sovCrowdfund(uint64(mapEntrySize))
		}
	}
	return n
}

func sovCrowdfund(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCrowdfund(x uint64) (n int) {
	return sovCrowdfund(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Crowdfund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCrowdfund
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Crowdfund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Crowdfund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrowdfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Total", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrowdfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrowdfund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrowdfund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Total = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrowdfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrowdfund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrowdfund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Amount = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrowdfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrowdfund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrowdfund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrowdfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrowdfund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrowdfund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Deadline = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrowdfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrowdfund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrowdfund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Owner", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrowdfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCrowdfund
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCrowdfund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Owner = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pledger", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCrowdfund
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthCrowdfund
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthCrowdfund
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Pledger == nil {
				m.Pledger = make(map[string]string)
			}
			var mapkey string
			var mapvalue string
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowCrowdfund
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCrowdfund
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthCrowdfund
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return ErrInvalidLengthCrowdfund
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var stringLenmapvalue uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowCrowdfund
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapvalue |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapvalue := int(stringLenmapvalue)
					if intStringLenmapvalue < 0 {
						return ErrInvalidLengthCrowdfund
					}
					postStringIndexmapvalue := iNdEx + intStringLenmapvalue
					if postStringIndexmapvalue < 0 {
						return ErrInvalidLengthCrowdfund
					}
					if postStringIndexmapvalue > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = string(dAtA[iNdEx:postStringIndexmapvalue])
					iNdEx = postStringIndexmapvalue
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipCrowdfund(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return ErrInvalidLengthCrowdfund
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Pledger[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipCrowdfund(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCrowdfund
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCrowdfund(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCrowdfund
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrowdfund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCrowdfund
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCrowdfund
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCrowdfund
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCrowdfund
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCrowdfund        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCrowdfund          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCrowdfund = fmt.Errorf("proto: unexpected end of group")
)
